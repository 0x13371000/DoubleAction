#define HDRTYPE HDR_TYPE_NONE

// STATIC: "WITH_BLUR" "0..1" [= 0]

#include "common_ps_fxc.h"

sampler FBSampler        : register( s0 );
sampler CombinedSampler  : register( s1 );
sampler BlurSampler      : register( s2 );

const float flSlowMoScale   : register( c0 );
const float flSlowMoFilter  : register( c1 );
const float flVignetteScale : register( c2 );
const float flNoiseScale    : register( c3 );
const float flBias          : register( c4 );
const float flGrainOffset   : register( c5 );

struct PS_INPUT
{
	float2 texCoord       : TEXCOORD0;
};

HALF4 main( PS_INPUT i ) : COLOR
{
	float4 aflFB = tex2D( FBSampler, i.texCoord );
	float4 aflCombined = tex2D( CombinedSampler, i.texCoord );

	float flGrain = tex2D( CombinedSampler, i.texCoord + float2(flGrainOffset, flGrainOffset) ).g;
	float flVignetteAlpha = aflCombined.b;
	float flOverlay = aflCombined.r;
	float flBlurAlpha = aflCombined.a;

	float flFBMax = max( aflFB.r, max( aflFB.g, aflFB.b ) );
	float flFBMin = min( aflFB.r, min( aflFB.g, aflFB.b ) );

	float flFBLevel = ( flFBMax + flFBMin ) / 2;
	float flFBSaturation = 0;
	if (flFBMax != flFBMin)
	{
		if (flFBLevel < 0.5)
			flFBSaturation = (flFBMax - flFBMin)/(flFBMax + flFBMin);
		else
			flFBSaturation = (flFBMax - flFBMin)/(2 - flFBMax - flFBMin);
	}

	// Only filter the desaturated and dark areas.
	float flSaturationRamp = RemapValClamped(flFBSaturation, 0, 0.4, 1, 0);
	float flLevelRamp = RemapValClamped(flFBLevel, 0, 0.4, 1, 0);

	float flTotalRamp = max(flSaturationRamp, flLevelRamp);

	float4 aflOutput = aflFB;

#if WITH_BLUR
	float4 aflBlur = tex2D( BlurSampler, i.texCoord );

	aflOutput.rgb = lerp(aflOutput.rgb, aflBlur.rgb, flBlurAlpha);
#endif

	aflOutput.rg = aflOutput.rg - flSlowMoFilter * flTotalRamp;

	aflOutput.rgb = lerp(aflOutput.rgb, float3(0, 0, 0), flVignetteAlpha * flVignetteScale);

	// Adjust levels. Crush the blacks and blow out the whites.
	float flExponent = log( flBias ) * -1.4427f;
	aflOutput.r = pow(RemapValClamped(aflOutput.r, 0, .56, 0, 1), flExponent);
	aflOutput.g = pow(RemapValClamped(aflOutput.g, 0, .56, 0, 1), flExponent);
	aflOutput.b = pow(RemapValClamped(aflOutput.b, 0, .56, 0, 1), flExponent);

	float flFBGrey = ( aflOutput.r + aflOutput.g + aflOutput.b ) / 3;

	aflOutput.rgb = lerp(aflOutput.rgb, float3(flFBGrey, flFBGrey, flFBGrey), .36);

	// Use a "screen" filter to apply grain to output. This helps bring the general light levels up a bit.
	float3 aflGrain = 1 - (1 - aflOutput.rgb)*(1 - float3(flGrain, flGrain, flGrain));

	// Scale it by the noise scale.
	aflOutput.rgb = lerp(aflOutput.rgb, aflGrain, flNoiseScale);

	float3 aflOverlay = float3(flOverlay, flOverlay, flOverlay);
	float3 aflConditional = step(0.5, aflOutput.rgb);
	float3 aflOverlaid = lerp(aflOutput*aflOverlay*2, 1 - (2*(1-aflOutput)*(1-aflOverlay)), aflConditional);

	// Scale it by the overlay scale.
	aflOutput.rgb = lerp(aflOutput.rgb, aflOverlaid.rgb, 0.15);

	return FinalOutput( lerp(aflFB, aflOutput, flSlowMoScale), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
}
