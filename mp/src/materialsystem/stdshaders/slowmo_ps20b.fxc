#define HDRTYPE HDR_TYPE_NONE

// STATIC: "WITH_BLUR" "0..1" [= 0]
// STATIC: "WITH_OSX" "0..1" [= 0]
// DYNAMIC: "WITH_VR" "0..1" [= 0]
// DYNAMIC: "WITH_DEATHCAM" "0..1" [= 0]

// SKIP: $WITH_BLUR
// SKIP: $WITH_DEATHCAM && $WITH_VR

#include "common_ps_fxc.h"

sampler FBSampler        : register( s0 );
sampler CombinedSampler  : register( s1 );
sampler BlurSampler      : register( s2 );

const float flSlowMoScale   : register( c0 );
const float flStyleSkillAlpha : register( c1 );
const float flGrainOffset   : register( c5 );
const float flStyleSkill    : register( c7 );

struct PS_INPUT
{
	float2 texCoord       : TEXCOORD0;
};

HALF4 main( PS_INPUT i ) : COLOR
{
	const float flSlowMoFilter = 0.09;
	const float flVignetteScale = 1;
	const float flNoiseScale = 0.05;

	float2 aflCombinedTexCoord = i.texCoord;

#if WITH_VR
	aflCombinedTexCoord.x = aflCombinedTexCoord.x * 2;
#endif

	float4 aflFB = tex2D( FBSampler, i.texCoord );
	float4 aflCombined = tex2D( CombinedSampler, aflCombinedTexCoord );

#if WITH_DEATHCAM
	// Death cam should be like a photo, so the grain should be static. (As in, not moving.)
	float flGrain = aflCombined.g;
#else
	float flGrain = tex2D( CombinedSampler, aflCombinedTexCoord + float2(flGrainOffset, flGrainOffset) ).g;
#endif

	float flVignetteAlpha = aflCombined.b;
	float flOverlay = aflCombined.r;
	float flBlurAlpha = aflCombined.a;

	float flFBMax = max( aflFB.r, max( aflFB.g, aflFB.b ) );
	float flFBMin = min( aflFB.r, min( aflFB.g, aflFB.b ) );

	float flFBLevel = ( flFBMax + flFBMin ) / 2;
	float flFBSaturation = (flFBMax - flFBMin)/lerp(2 - flFBMax - flFBMin, flFBMax + flFBMin, step(0.5, flFBLevel));

	// Only filter the desaturated and dark areas.
	float flSaturationRamp = RemapValClamped(flFBSaturation, 0, 0.4, 1, 0);
	float flLevelRamp = RemapValClamped(flFBLevel, 0, 0.4, 1, 0);

	float flTotalRamp = max(flSaturationRamp, flLevelRamp);

	float4 aflOutput = aflFB;

#if WITH_BLUR
	float4 aflBlur = tex2D( BlurSampler, aflCombinedTexCoord );

	aflOutput.rgb = lerp(aflOutput.rgb, aflBlur.rgb, flBlurAlpha);
#endif

	// Only do the blue tint if we're not in the death cam.
#if WITH_DEATHCAM
	aflOutput.gb = aflOutput.gb - 0.1 * flTotalRamp;
#else
	{
		float3 aflOverlay = float3(1, 0.82, 0);
		float3 aflConditional = step(0.5, aflOutput.rgb);
		float3 aflOverlaid = lerp(aflOutput*aflOverlay*2, 1 - (2*(1-aflOutput)*(1-aflOverlay)), aflConditional);

		aflOutput.rgb = lerp(aflOutput.rgb, aflOverlaid, flStyleSkill * flStyleSkillAlpha);

		aflOutput.rg = aflOutput.rg - flSlowMoFilter * flTotalRamp * flSlowMoScale;
	}
#endif

	aflOutput.rgb = lerp(aflOutput.rgb, float3(0, 0, 0), flVignetteAlpha * flVignetteScale);

	// Adjust levels. Crush the blacks and blow out the whites.
	const float flExponent = 1.73697f;// log( 0.4 ) * -1.4427f;
	aflOutput.rgb = pow(saturate( aflOutput.rgb * 1.587 ), flExponent); // 1.587 ~= 1/0.63

	float flFBGrey = ( aflOutput.r + aflOutput.g + aflOutput.b ) / 3;

	aflOutput.rgb = lerp(aflOutput.rgb, float3(flFBGrey, flFBGrey, flFBGrey), .36);

	// Use a "screen" filter to apply grain to output. This helps bring the general light levels up a bit.
	float3 aflGrain = 1 - (1 - aflOutput.rgb)*(1 - float3(flGrain, flGrain, flGrain));

	// Scale it by the noise scale.
	aflOutput.rgb = lerp(aflOutput.rgb, aflGrain, flNoiseScale);

#if !WITH_VR
	// Don't do the overlay in VR, it won't match up from eye to eye.

	float3 aflOverlay = float3(flOverlay, flOverlay, flOverlay);
	float3 aflConditional = step(0.5, aflOutput.rgb);
	float3 aflOverlaid = lerp(aflOutput*aflOverlay*2, 1 - (2*(1-aflOutput)*(1-aflOverlay)), aflConditional);

	// Scale it by the overlay scale.
	aflOutput.rgb = lerp(aflOutput.rgb, aflOverlaid.rgb, 0.15 * flSlowMoScale);
#endif

	float flCenterWeight = RemapValClamped(length(aflCombinedTexCoord - float2(0.5, 0.5)), 0.2, 0.8, 0.65, 1.0);

#if WITH_DEATHCAM
	return FinalOutput( aflOutput, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#else
	return FinalOutput( lerp(aflFB, lerp(aflFB, aflOutput, max(flSlowMoScale, flStyleSkill)), flCenterWeight), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#endif
}
